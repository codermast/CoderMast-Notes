import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as n}from"./app-BmK6V31l.js";const t={},l=n(`<h1 id="mysql进阶-锁" tabindex="-1"><a class="header-anchor" href="#mysql进阶-锁"><span>MySQL进阶 - 锁</span></a></h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除了传统的计算机资源(CPU、RAM、I/O)的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p><h2 id="全局锁" tabindex="-1"><a class="header-anchor" href="#全局锁"><span>全局锁</span></a></h2><h3 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1"><span>介绍</span></a></h3><p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句，已经更新操作的事务提交语句都将被阻塞。</p><p>其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性。</p><h3 id="一致性数据备份" tabindex="-1"><a class="header-anchor" href="#一致性数据备份"><span>一致性数据备份</span></a></h3><ol><li>加锁</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>flush <span class="token keyword">tables</span> <span class="token keyword">with</span> <span class="token keyword">read</span> <span class="token keyword">lock</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>备份</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysqldump <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p1234</span> tb_user <span class="token operator">&gt;</span> tb_user.sql<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意：这并不是一条SQL语句！而是一条Shell脚本！</p></blockquote><ol start="3"><li>解锁</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">unlock</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><p>数据库中加全局锁，是一个比较重的操作，存在以下问题：</p><ol><li>如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就完全停止。</li><li>如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志（binlog），会导致主从延迟。</li></ol><p>在InnoDB引擎中，我们可以在备份时加上参数 <code>--single-transaction</code>参数来完成不加锁的一致性数据备份。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysaldump --single-transaction <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p1234</span> tb_user <span class="token operator">&gt;</span> tb_user.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="表级锁" tabindex="-1"><a class="header-anchor" href="#表级锁"><span>表级锁</span></a></h2><h3 id="介绍-2" tabindex="-1"><a class="header-anchor" href="#介绍-2"><span>介绍</span></a></h3><p>表级锁，每次操作锁住整张表。锁定力度大，发生锁冲突的概率最高，并发度最低。应用在MyISAM、InnoDB、BDB等存储引擎中。</p><p>对于表级锁，主要分为以下三种类型：</p><ol><li>表锁</li><li>元数据锁（meta data lock，MDL）</li><li>意向锁</li></ol><h3 id="_1-表锁" tabindex="-1"><a class="header-anchor" href="#_1-表锁"><span>1.表锁</span></a></h3><ul><li>分类<br> 对于表锁，又可以分为两类：</li></ul><ol><li>表共享读锁（read lock）</li><li>表独占写锁（write lock）</li></ol><ul><li>语法</li></ul><ol><li>加锁：</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">lock</span> <span class="token keyword">tables</span> 表名 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">read</span><span class="token operator">/</span><span class="token keyword">write</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>释放锁</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">unlock</span> <span class="token keyword">tables</span> <span class="token operator">/</span> 客户端断开连接
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">注意</p><p>读锁不会阻塞其他客户端的读，但是会阻塞写。写锁既会阻塞其他客户端的读，又会阻塞其他客户端的读。</p></div><h3 id="_2-元数据锁" tabindex="-1"><a class="header-anchor" href="#_2-元数据锁"><span>2.元数据锁</span></a></h3><p>MDL加锁过程是系统自动控制，无需显示使用，在访问一张表的时候会自动加上。MDL锁主要作用是维护元数据的数据一致性，在表上有活动事务的时候，不可以对元数据进行写入操作。为了避免DML与DDL冲突，保证读写的正确性。</p><p>在MySQL5.5中引入了MDL，当对一张表进行增删改查的时候，加MDL读锁(共享)；当对表结构进行变更操作的时候，加MDL写锁（排他）。</p><table><thead><tr><th style="text-align:center;">对应SQL</th><th style="text-align:center;">锁类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">lock table xxx read / write</td><td style="text-align:center;">SHARED_READ_ONLY / SHARED_NO_READ_WRITE</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">select 、 select ... lock in share mode</td><td style="text-align:center;">SHARED_READ</td><td style="text-align:center;">与SHARED_READ、SHARED_WRITE兼容，与EXCLUSIVE</td></tr><tr><td style="text-align:center;">insert 、 update 、delete 、 select ... for update</td><td style="text-align:center;">SHARED_WRITE</td><td style="text-align:center;">与SHARED_READ、SHARED_WRITE兼容，与EXCLUSIVE</td></tr><tr><td style="text-align:center;">alter table ...</td><td style="text-align:center;">EXCLUSIVE</td><td style="text-align:center;">与其他的MDL都互斥</td></tr></tbody></table><p>查看元数据锁：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> object_type<span class="token punctuation">,</span>object_schema<span class="token punctuation">,</span>object_name<span class="token punctuation">,</span>lock_type<span class="token punctuation">,</span>lock_duration <span class="token keyword">from</span> performance_schema<span class="token punctuation">.</span>metadate_locks<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-意向锁" tabindex="-1"><a class="header-anchor" href="#_3-意向锁"><span>3.意向锁</span></a></h3><p>为了避免DML在执行时，加的行锁与表锁的冲突，在InnoDB中引入了意向锁，使得表锁不用检查每行数据是否加锁，使用意向锁来减少表锁的检查。</p><ol><li>意向共享锁（IS）：</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span> <span class="token identifier"><span class="token punctuation">\`</span><span class="token punctuation">\`</span><span class="token punctuation">\`</span>
与表锁共享锁 read 兼容，与表锁排他锁 write 互斥。

2. 意向排他锁（IX）：
\`\`<span class="token punctuation">\`</span></span><span class="token keyword">sql</span>
<span class="token keyword">insert</span>、<span class="token keyword">update</span>、<span class="token keyword">delete</span>、<span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">for</span> <span class="token keyword">update</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与表锁共享锁 read 及排他锁 write 都互斥。意向锁之间不会互斥。</p><p>通过以下SQL，查看意向锁及行锁的加锁情况。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> object_schema<span class="token punctuation">,</span>object_name<span class="token punctuation">,</span>index_name<span class="token punctuation">,</span>lock_type<span class="token punctuation">,</span>lock_mode<span class="token punctuation">,</span>lock_data <span class="token keyword">from</span> performance_schema<span class="token punctuation">.</span>data_locks<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="行级锁" tabindex="-1"><a class="header-anchor" href="#行级锁"><span>行级锁</span></a></h2><p>行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发程度高。主要应用在InnoDB存储引擎中。</p><p>InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁。对于行级锁，主要分为以下三类：</p><ol><li><p>行锁（Record Lock）：锁定单个行记录的锁，防止其他事务对此行进行update和delete。在RC、RR隔离级别下都支持。</p></li><li><p>间隙锁（Gap Lock）：锁定索引记录间隙（不包含该记录值），确保索引记录间隙不变，防止其他事务在这个间隙进行insert，产生幻读。在RR隔离级别下都支持。</p></li><li><p>临键锁（Next-Key Lock）：行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。在RR隔离级别下支持。</p></li></ol><h3 id="行锁" tabindex="-1"><a class="header-anchor" href="#行锁"><span>行锁</span></a></h3><p>InnoDB实现了以下两种类型的行锁：</p><ol><li><p>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。</p></li><li><p>排他锁（X）：允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。</p></li></ol><div class="hint-container note"><p class="hint-container-title">兼容和互斥</p><p>只有共享锁和共享锁之间是兼容的，其余全是冲突的。</p><p>可以将共享看作是只读。</p></div><h3 id="间隙锁" tabindex="-1"><a class="header-anchor" href="#间隙锁"><span>间隙锁</span></a></h3><h3 id="临键锁" tabindex="-1"><a class="header-anchor" href="#临键锁"><span>临键锁</span></a></h3><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>// todo:有点繁琐，暂未理解</p></div>`,58),i=[l];function o(p,c){return a(),s("div",null,i)}const u=e(t,[["render",o],["__file","mysql-lock.html.vue"]]),h=JSON.parse('{"path":"/database/mysql/mysql-lock.html","title":"MySQL进阶 - 锁","lang":"zh-CN","frontmatter":{"order":19,"description":"MySQL进阶 - 锁 介绍 锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除了传统的计算机资源(CPU、RAM、I/O)的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复...","head":[["meta",{"property":"og:url","content":"https://www.codermast.com/database/mysql/mysql-lock.html"}],["meta",{"property":"og:site_name","content":"CoderMast编程桅杆"}],["meta",{"property":"og:title","content":"MySQL进阶 - 锁"}],["meta",{"property":"og:description","content":"MySQL进阶 - 锁 介绍 锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除了传统的计算机资源(CPU、RAM、I/O)的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-13T13:14:10.000Z"}],["meta",{"property":"article:author","content":"友人"}],["meta",{"property":"article:modified_time","content":"2023-06-13T13:14:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL进阶 - 锁\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-13T13:14:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"友人\\",\\"url\\":\\"https://www.codermast.com\\",\\"email\\":\\"codermast@163.com\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"全局锁","slug":"全局锁","link":"#全局锁","children":[{"level":3,"title":"介绍","slug":"介绍-1","link":"#介绍-1","children":[]},{"level":3,"title":"一致性数据备份","slug":"一致性数据备份","link":"#一致性数据备份","children":[]},{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]}]},{"level":2,"title":"表级锁","slug":"表级锁","link":"#表级锁","children":[{"level":3,"title":"介绍","slug":"介绍-2","link":"#介绍-2","children":[]},{"level":3,"title":"1.表锁","slug":"_1-表锁","link":"#_1-表锁","children":[]},{"level":3,"title":"2.元数据锁","slug":"_2-元数据锁","link":"#_2-元数据锁","children":[]},{"level":3,"title":"3.意向锁","slug":"_3-意向锁","link":"#_3-意向锁","children":[]}]},{"level":2,"title":"行级锁","slug":"行级锁","link":"#行级锁","children":[{"level":3,"title":"行锁","slug":"行锁","link":"#行锁","children":[]},{"level":3,"title":"间隙锁","slug":"间隙锁","link":"#间隙锁","children":[]},{"level":3,"title":"临键锁","slug":"临键锁","link":"#临键锁","children":[]}]}],"git":{"createdTime":1681489050000,"updatedTime":1686662050000,"contributors":[{"name":"codermast","email":"codermast@qq.com","commits":1}]},"readingTime":{"minutes":4.65,"words":1396},"filePathRelative":"database/mysql/mysql-lock.md","localizedDate":"2023年4月14日","autoDesc":true,"excerpt":"\\n<h2>介绍</h2>\\n<p>锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除了传统的计算机资源(CPU、RAM、I/O)的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p>\\n<h2>全局锁</h2>\\n<h3>介绍</h3>\\n<p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句，已经更新操作的事务提交语句都将被阻塞。</p>\\n<p>其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性。</p>"}');export{u as comp,h as data};
