import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as r,a as o}from"./app-D_B85gem.js";const c="/assets/2024-01-10-21-23-03-CecTkR_3.png",n={},i=o('<h1 id="docker-简介" tabindex="-1"><a class="header-anchor" href="#docker-简介"><span>Docker - 简介</span></a></h1><h2 id="docker是什么" tabindex="-1"><a class="header-anchor" href="#docker是什么"><span>Docker是什么？</span></a></h2><p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。</p><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><p>Docker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版），我们用社区版就可以了。</p><h2 id="docker能干什么" tabindex="-1"><a class="header-anchor" href="#docker能干什么"><span>Docker能干什么？</span></a></h2><p>Docker是一种容器化平台，可用于打包、分发和运行应用程序及其依赖项。以下是Docker的一些主要功能和用途：</p><ol><li><p>容器化应用程序： Docker允许开发人员将应用程序及其所有依赖项打包到一个称为容器的独立单元中。这包括代码、运行时、系统工具、系统库等。容器可以在任何支持Docker的环境中运行，而不受环境差异的影响。</p></li><li><p>跨平台性： Docker容器可以在不同的操作系统和云平台上运行，提供了更强大的跨平台性。无论是在开发、测试还是生产环境，都可以使用相同的容器。</p></li><li><p>轻量级： Docker容器共享宿主操作系统的内核，因此它们相比于传统的虚拟机更加轻量级。这使得容器的启动速度更快，占用更少的系统资源。</p></li><li><p>版本控制： Docker容器的镜像可以被版本控制，允许开发人员和运维团队轻松地追踪和回滚应用程序的版本。</p></li><li><p>快速部署： Docker容器可以快速启动、停止和重新启动，提高了应用程序的部署速度。这对于微服务架构和持续集成/持续部署 (CI/CD) 策略非常有用。</p></li><li><p>隔离性： Docker容器提供了进程级别的隔离，使得应用程序之间相互独立。这有助于避免由于一个应用程序的问题导致整个系统崩溃。</p></li><li><p>资源优化： 多个Docker容器可以在同一台主机上并发运行，共享主机的资源。Docker通过优化资源使用，提高了系统的效率。</p></li><li><p>生态系统： Docker拥有丰富的生态系统，包括Docker Hub，其中存储了大量的公共和私有Docker镜像，使得开发人员可以轻松共享和获取镜像。</p></li></ol><p>总体而言，Docker通过容器化技术提供了一种便捷、灵活且高效的方式来开发、打包和部署应用程序。</p><h2 id="docker和普通虚拟机的区别" tabindex="-1"><a class="header-anchor" href="#docker和普通虚拟机的区别"><span>Docker和普通虚拟机的区别</span></a></h2><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以理解为普通虚拟机是在宿主机的物理环境上，将操作系统进行虚拟化，类似于提供一个整体的虚拟环境，你可以在这个环境内干任何想干的事，而 Docker 在宿主机的基础上，仅仅只虚拟化所指定的依赖项。</p><p>虚拟机是在物理硬件层面对资源的隔离，而 Docker 是在操作系统的层面对所使用应用的隔离。</p><p>故 Docker 在性能上大大高于普通虚拟机。</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">虚拟机</th><th style="text-align:center;">Docker</th></tr></thead><tbody><tr><td style="text-align:center;">隔离程度</td><td style="text-align:center;">隔离操作系统</td><td style="text-align:center;">隔离所需依赖</td></tr><tr><td style="text-align:center;">资源利用率</td><td style="text-align:center;">低</td><td style="text-align:center;">高</td></tr><tr><td style="text-align:center;">运行效率</td><td style="text-align:center;">差</td><td style="text-align:center;">好</td></tr><tr><td style="text-align:center;">成本</td><td style="text-align:center;">高</td><td style="text-align:center;">低</td></tr></tbody></table><h2 id="学习docker之前-需要什么基础" tabindex="-1"><a class="header-anchor" href="#学习docker之前-需要什么基础"><span>学习Docker之前，需要什么基础</span></a></h2><p>在学习 Docker 之前，你需要掌握一些常用的 Linux 操作指令，至少认识一些常见的命令，能读懂即可。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果您对 Linux 操作指令不太熟悉，或者您想学习 Linux ，可以参考本站的 Linux 系列学习笔记。</p><p>// TODO:Linux学习笔记</p></div>',19),a=[i];function d(l,p){return r(),t("div",null,a)}const h=e(n,[["render",d],["__file","docker-introduce.html.vue"]]),m=JSON.parse('{"path":"/dev-tools/docker/docker-introduce.html","title":"Docker - 简介","lang":"zh-CN","frontmatter":{"order":1,"description":"Docker - 简介 Docker是什么？ Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。 Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone ...","head":[["meta",{"property":"og:url","content":"https://www.codermast.com/dev-tools/docker/docker-introduce.html"}],["meta",{"property":"og:site_name","content":"友人的编程指南"}],["meta",{"property":"og:title","content":"Docker - 简介"}],["meta",{"property":"og:description","content":"Docker - 简介 Docker是什么？ Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。 Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-10T15:17:38.000Z"}],["meta",{"property":"article:author","content":"友人"}],["meta",{"property":"article:modified_time","content":"2024-01-10T15:17:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker - 简介\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-10T15:17:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"友人\\",\\"url\\":\\"https://www.codermast.com\\",\\"email\\":\\"codermast@163.com\\"}]}"]]},"headers":[{"level":2,"title":"Docker是什么？","slug":"docker是什么","link":"#docker是什么","children":[]},{"level":2,"title":"Docker能干什么？","slug":"docker能干什么","link":"#docker能干什么","children":[]},{"level":2,"title":"Docker和普通虚拟机的区别","slug":"docker和普通虚拟机的区别","link":"#docker和普通虚拟机的区别","children":[]},{"level":2,"title":"学习Docker之前，需要什么基础","slug":"学习docker之前-需要什么基础","link":"#学习docker之前-需要什么基础","children":[]}],"git":{"createdTime":1704899858000,"updatedTime":1704899858000,"contributors":[{"name":"codermast","email":"codermast@qq.com","commits":1}]},"readingTime":{"minutes":3.28,"words":983},"filePathRelative":"dev-tools/docker/docker-introduce.md","localizedDate":"2024年1月10日","autoDesc":true,"excerpt":"\\n<h2>Docker是什么？</h2>\\n<p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。</p>\\n<p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>\\n<p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p>\\n<p>Docker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版），我们用社区版就可以了。</p>"}');export{h as comp,m as data};
