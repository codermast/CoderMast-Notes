import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-BmK6V31l.js";const e="/assets/2024-05-29-11-03-54-CY80dmsy.png",p={},o=t('<h1 id="_6-生命周期" tabindex="-1"><a class="header-anchor" href="#_6-生命周期"><span>6. 生命周期</span></a></h1><p>生命周期是指组件从创建、挂载、更新到销毁的整个过程中所经历的一系列阶段。在 Vue 中，每个组件都有自己的生命周期，可以通过生命周期钩子函数来监听和处理组件在不同阶段的行为和状态。</p><p>Vue 组件的生命周期可以分为<strong>创建</strong>、<strong>挂载</strong>、<strong>更新</strong>、<strong>销毁</strong>四个阶段。每个阶段都有执行前和执行后两个钩子。</p><figure><img src="'+e+`" alt="Vue 生命周期" width="800" tabindex="0" loading="lazy"><figcaption>Vue 生命周期</figcaption></figure><div class="hint-container caution"><p class="hint-container-title">这里要注意的是在 Vue3 中 组合式 API 的 setup 是在所有钩子之前执行的。</p></div><ul><li><p><code>Vue2</code>的生命周期</p><blockquote><p>创建阶段：<code>beforeCreate</code>、<code>created</code></p><p>挂载阶段：<code>beforeMount</code>、<code>mounted</code></p><p>更新阶段：<code>beforeUpdate</code>、<code>updated</code></p><p>销毁阶段：<code>beforeDestroy</code>、<code>destroyed</code></p></blockquote></li><li><p><code>Vue3</code>的生命周期</p><blockquote><p>创建阶段：<code>setup</code></p><p>挂载阶段：<code>onBeforeMount</code>、<code>onMounted</code></p><p>更新阶段：<code>onBeforeUpdate</code>、<code>onUpdated</code></p><p>卸载阶段：<code>onBeforeUnmount</code>、<code>onUnmounted</code></p></blockquote></li></ul><p>常用的钩子：<code>onMounted</code>(挂载完毕)、<code>onUpdated</code>(更新完毕)、<code>onBeforeUnmount</code>(卸载之前)</p><h2 id="创建阶段" tabindex="-1"><a class="header-anchor" href="#创建阶段"><span>创建阶段</span></a></h2><p>在这个阶段，Vue 实例正在被创建并初始化，包括数据的观测、事件的监听、虚拟 DOM 的初始化等。在这个阶段，会依次触发以下生命周期钩子函数：</p><ul><li>beforeCreate：在实例被创建之前，组件的数据和方法都还未被初始化。</li><li>created：在实例创建完成后，组件的数据和方法已经被初始化，但是 DOM 元素还未被挂载到页面上。</li></ul><h2 id="挂载阶段" tabindex="-1"><a class="header-anchor" href="#挂载阶段"><span>挂载阶段</span></a></h2><p>在这个阶段，Vue 实例已经完成了初始化，DOM 元素已经被创建并插入到页面中。在这个阶段，会依次触发以下生命周期钩子函数：</p><ul><li>beforeMount：在 DOM 元素被挂载到页面之前，可以在这个钩子函数中修改组件的数据和方法。</li><li>mounted：在 DOM 元素被挂载到页面之后，可以在这个钩子函数中访问组件的 DOM 元素，并进行一些初始化操作。</li></ul><h2 id="更新阶段" tabindex="-1"><a class="header-anchor" href="#更新阶段"><span>更新阶段</span></a></h2><p>在这个阶段，Vue 实例的数据发生了变化，需要重新渲染 DOM 元素。在这个阶段，会依次触发以下生命周期钩子函数：</p><ul><li>beforeUpdate：在组件更新之前，可以在这个钩子函数中获取组件更新前的状态。</li><li>updated：在组件更新之后，可以在这个钩子函数中获取组件更新后的状态。</li></ul><h2 id="销毁阶段" tabindex="-1"><a class="header-anchor" href="#销毁阶段"><span>销毁阶段</span></a></h2><p>在这个阶段，Vue 实例被销毁，包括数据的销毁、事件的解绑、DOM 元素的销毁等。在这个阶段，会触发以下生命周期钩子函数：</p><ul><li>beforeDestroy：在组件被销毁之前，可以在这个钩子函数中进行一些清理工作。</li><li>destroyed：在组件被销毁之后，可以在这个钩子函数中访问组件的 DOM 元素，并进行一些清理工作。</li></ul><p>掌握 Vue 组件的生命周期，可以帮助我们更好地理解 Vue 组件的运行机制，更好地进行组件的开发和调试。</p><h2 id="具体使用" tabindex="-1"><a class="header-anchor" href="#具体使用"><span>具体使用</span></a></h2><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>当前求和为：{{sum}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sum++<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">,</span>onBeforeMount<span class="token punctuation">,</span>onMounted<span class="token punctuation">,</span>onBeforeUpdate<span class="token punctuation">,</span>onUpdated<span class="token punctuation">,</span>onBeforeUnmount<span class="token punctuation">,</span>onUnmounted<span class="token punctuation">}</span> <span class="token keyword">from</span>  <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">onBeforeMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;onBeforeMount&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;onMounted&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">onBeforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;onBeforeUpdate&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">onUpdated</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;onUpdated&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">onBeforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;onBeforeUnmount&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;onUnmounted&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token comment">/* 这里写组件内的 CSS 样式 */</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">自定义 hook</p><p>自定义 Hook 实际上就是把写在生命周期钩子函数中的一些内容，封装成一个方法，直接在钩子函数中调用该方法。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;onBeforeMount&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">onBeforeMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// 在钩子函数内调用自定义的 hook 函数，实现代码的复用</span>
    <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,23),c=[o];function l(i,u){return s(),a("div",null,c)}const k=n(p,[["render",l],["__file","life-cycle.html.vue"]]),v=JSON.parse('{"path":"/front-end/vue3/life-cycle.html","title":"6. 生命周期","lang":"zh-CN","frontmatter":{"order":6,"description":"6. 生命周期 生命周期是指组件从创建、挂载、更新到销毁的整个过程中所经历的一系列阶段。在 Vue 中，每个组件都有自己的生命周期，可以通过生命周期钩子函数来监听和处理组件在不同阶段的行为和状态。 Vue 组件的生命周期可以分为创建、挂载、更新、销毁四个阶段。每个阶段都有执行前和执行后两个钩子。 Vue 生命周期Vue 生命周期 这里要注意的是在 Vu...","head":[["meta",{"property":"og:url","content":"https://www.codermast.com/front-end/vue3/life-cycle.html"}],["meta",{"property":"og:site_name","content":"CoderMast编程桅杆"}],["meta",{"property":"og:title","content":"6. 生命周期"}],["meta",{"property":"og:description","content":"6. 生命周期 生命周期是指组件从创建、挂载、更新到销毁的整个过程中所经历的一系列阶段。在 Vue 中，每个组件都有自己的生命周期，可以通过生命周期钩子函数来监听和处理组件在不同阶段的行为和状态。 Vue 组件的生命周期可以分为创建、挂载、更新、销毁四个阶段。每个阶段都有执行前和执行后两个钩子。 Vue 生命周期Vue 生命周期 这里要注意的是在 Vu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-29T03:35:36.000Z"}],["meta",{"property":"article:author","content":"友人"}],["meta",{"property":"article:modified_time","content":"2024-05-29T03:35:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6. 生命周期\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-29T03:35:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"友人\\",\\"url\\":\\"https://www.codermast.com\\",\\"email\\":\\"codermast@163.com\\"}]}"]]},"headers":[{"level":2,"title":"创建阶段","slug":"创建阶段","link":"#创建阶段","children":[]},{"level":2,"title":"挂载阶段","slug":"挂载阶段","link":"#挂载阶段","children":[]},{"level":2,"title":"更新阶段","slug":"更新阶段","link":"#更新阶段","children":[]},{"level":2,"title":"销毁阶段","slug":"销毁阶段","link":"#销毁阶段","children":[]},{"level":2,"title":"具体使用","slug":"具体使用","link":"#具体使用","children":[]}],"git":{"createdTime":1716953736000,"updatedTime":1716953736000,"contributors":[{"name":"codermast","email":"codermast@qq.com","commits":1}]},"readingTime":{"minutes":3.05,"words":916},"filePathRelative":"front-end/vue3/life-cycle.md","localizedDate":"2024年5月29日","autoDesc":true,"excerpt":"\\n<p>生命周期是指组件从创建、挂载、更新到销毁的整个过程中所经历的一系列阶段。在 Vue 中，每个组件都有自己的生命周期，可以通过生命周期钩子函数来监听和处理组件在不同阶段的行为和状态。</p>\\n<p>Vue 组件的生命周期可以分为<strong>创建</strong>、<strong>挂载</strong>、<strong>更新</strong>、<strong>销毁</strong>四个阶段。每个阶段都有执行前和执行后两个钩子。</p>\\n<figure><figcaption>Vue 生命周期</figcaption></figure>\\n<div class=\\"hint-container caution\\">\\n<p class=\\"hint-container-title\\">这里要注意的是在 Vue3 中 组合式 API 的 setup 是在所有钩子之前执行的。</p>\\n</div>"}');export{k as comp,v as data};
