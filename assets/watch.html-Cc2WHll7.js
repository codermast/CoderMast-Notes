import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as t}from"./app-BmK6V31l.js";const p={},e=t(`<h1 id="_5-监视" tabindex="-1"><a class="header-anchor" href="#_5-监视"><span>5. 监视</span></a></h1><p>Watch 是 Vue 提供的一个用于监视响应式数据变化并执行相应操作的 API，能够对响应式数据的变化做出一些操作的功能。Vue3 中的 Watch 支持多种用法，包括监视响应式对象、ref 对象、数组、函数等。</p><ol><li>ref 定义的数据</li><li>reactive 定义的数据</li><li>函数返回一个值，即 Getter 函数</li><li>包含上述内容的数组</li></ol><h2 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h2><p>在正式使用 watch 监视之前，为了避免一脸懵逼的情况出现，请先系统性的学习一下 watch 的具体用法，不必担心。</p><p>watch 监视器是一个函数，这个函数需要几个参数：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">watch</span><span class="token punctuation">(</span>source<span class="token operator">:</span> Ref <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">callback</span><span class="token operator">:</span> WatchCallback<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> WatchOptions<span class="token punctuation">)</span><span class="token operator">:</span> StopHandle
</code></pre></div><ul><li>source：要监听的源。</li></ul><p>可以是一个 ref 对象，也可以是一个返回值的函数。如果是一个 ref 对象，那么监听函数会在 ref 对象的值发生变化时被调用。如果是一个函数，那么监听函数会在函数的返回值发生变化时被调用。</p><ul><li>callback：监听回调函数</li></ul><p>callback 是一个监听回调函数，当源发生变化时会被调用。它有两个参数：newValue 和 oldValue，分别表示新值和旧值。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token function">watch</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">count 变化了：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>oldValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> =&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>在上面的代码中，我们监听了一个 ref 对象 count，并在它发生变化时输出变化信息。</p><ul><li>options：可选的选项对象，用于配置监听行为。它包含以下属性： <ul><li>immediate：是否在监听时立即执行一次回调函数，默认为 false。</li><li>deep：是否深度监听对象和数组的变化，默认为 false。</li><li>flush：何时执行回调函数，可选值为 &#39;pre&#39;、&#39;post&#39; 和 &#39;sync&#39;，默认为 &#39;post&#39;。</li><li>onTrack：监听被触发时的回调函数，用于追踪依赖关系。</li><li>onTrigger：监听回调函数被触发时的回调函数，用于追踪依赖关系。</li></ul></li></ul><p>例如，我们可以使用 immediate 选项来在监听时立即执行一次回调函数：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token function">watch</span><span class="token punctuation">(</span>
  count<span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">count 变化了：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>oldValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> =&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre></div><p>在上面的代码中，我们使用 immediate 选项来在监听之前立即先执行一次回调函数。</p><ul><li>StopHandle：一个取消函数</li></ul><p>watch 函数的返回值是一个取消函数，用于停止当前的监听。例如：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> stopWatch <span class="token operator">=</span> <span class="token function">watch</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">count 变化了：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>oldValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> =&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 5 秒后停止监听</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">stopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>
</code></pre></div><p>在上面的代码中，我们在调用 watch 函数时，将返回的取消函数保存起来，并在 5 秒后调用它来停止监听。</p><div class="hint-container tip"><p class="hint-container-title">了解 Watch 监视器的基本语法，现在就来看几个案例吧，根据这几个案例，你可以更好的使用和掌握监视器。</p></div><h2 id="监视-ref-定义的数据" tabindex="-1"><a class="header-anchor" href="#监视-ref-定义的数据"><span>监视 ref 定义的数据</span></a></h2><h3 id="_1-基本数据类型" tabindex="-1"><a class="header-anchor" href="#_1-基本数据类型"><span>1. 基本数据类型</span></a></h3><p>使用 watch 监视 ref 定义的基本类型的数据，直接写数据名即可，实际监视的是其 .value 值的变化。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">// 监视 ref 定义的 基本类型 数据</span>
<span class="token keyword">const</span> stopWatch <span class="token operator">=</span> <span class="token function">watch</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sum变化了&#39;</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>newValue <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">stopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>watch 监视器的返回值是一个停止函数，调用这个函数可以停止对应的监视器继续监听。</p><h3 id="_2-对象数据类型" tabindex="-1"><a class="header-anchor" href="#_2-对象数据类型"><span>2. 对象数据类型</span></a></h3><p>使用 watch 监视 ref 定义的对象类型的数据，直接写数据名即可，实际监视的是对象地址的的变化，如果想监视对象内部的数据，则要开启深度监视。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 监视 ref 定义的 对象类型 数据</span>
<span class="token function">watch</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;person变化了&#39;</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre></div><div class="hint-container important"><p class="hint-container-title">重要</p><ul><li><p>若修改的是<code>ref</code>定义的对象中的属性，<code>newValue</code> 和 <code>oldValue</code> 都是新值，因为它们是同一个对象。</p></li><li><p>若修改整个<code>ref</code>定义的对象，<code>newValue</code> 是新值， <code>oldValue</code> 是旧值，因为不是同一个对象了。</p></li></ul></div><h2 id="监视-reactive-定义的数据" tabindex="-1"><a class="header-anchor" href="#监视-reactive-定义的数据"><span>监视 reactive 定义的数据</span></a></h2><p>使用 watch 监视 reactive 定义的对象类型的数据，默认开启深度监视，即监视对象内的每个属性。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">watch</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;person变化了&#39;</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="监视函数的返回值" tabindex="-1"><a class="header-anchor" href="#监视函数的返回值"><span>监视函数的返回值</span></a></h2><p>监视一个函数的返回值时，函数的返回值可以是 ref 对象内的某一个属性，也可以是多个，故监视 ref 对象内的属性和监视多个对象，都是使用这种方式，写成函数式即可。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 数据</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token literal-property property">car</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">c1</span><span class="token operator">:</span><span class="token string">&#39;奔驰&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">c2</span><span class="token operator">:</span><span class="token string">&#39;宝马&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 监视某个属性</span>
<span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>person<span class="token punctuation">.</span>car<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;person.car变化了&#39;</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 监视多个数据 </span>
<span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>person<span class="token punctuation">.</span>name<span class="token punctuation">,</span>person<span class="token punctuation">.</span>car<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;person.name变化了&#39;</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;person.car变化了&#39;</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><div class="hint-container info"><p class="hint-container-title">监视 ref 或 reactive 定义的 对象类型 数据中的某个属性</p><ol><li>若该属性值<strong>不是</strong>【对象类型】，需要写成函数形式。</li><li>若该属性值是<strong>依然</strong>是【对象类型】，可直接编，也可写成函数，建议写成函数。</li></ol><ul><li>结论：监视的要是对象里的属性，那么最好写函数式。</li><li>注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。</li></ul></div><h2 id="监视包含上述数据的数组" tabindex="-1"><a class="header-anchor" href="#监视包含上述数据的数组"><span>监视包含上述数据的数组</span></a></h2><p>监听包含数据的数组，可以使用 watch 函数的 deep 选项来深度监听数组变化。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Charlie&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// 监听数组</span>
<span class="token function">watch</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;items 变化了：&#39;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre></div><p>在上面的代码中，我们使用 watch 函数来监听 items 数组的变化，并将 deep 选项设置为 true 来深度监听数组的变化。当 items 数组的某个元素发生变化时，监听函数会被调用。</p><p>需要注意的是，当使用 deep 选项时，监听函数的 newValue 和 oldValue 参数都是响应式的，也就是说，它们会随着数组的变化而变化。</p><h2 id="watcheffect" tabindex="-1"><a class="header-anchor" href="#watcheffect"><span>WatchEffect</span></a></h2><p><code>WatchEffect</code> 会立即运行一次函数体，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。<code>WatchEffect</code> 默认开启 <code>deep</code> 和 <code>immediate</code> 。由于<code> WatchEffect</code> 的使用方法很简单，和 <code>Watch</code> 类似，这里就不再对 <code>WatchEffect</code> 的语法使用做详细说明，参考下面的例子，相信你很快能够明白理解。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token literal-property property">car</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">c1</span><span class="token operator">:</span><span class="token string">&#39;奔驰&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">c2</span><span class="token operator">:</span><span class="token string">&#39;宝马&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 返回值是一个停止函数</span>
<span class="token keyword">const</span> stopWatch <span class="token operator">=</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;person.name变化了&#39;</span><span class="token punctuation">,</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;person.car变化了&#39;</span><span class="token punctuation">,</span>person<span class="token punctuation">.</span>car<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 5 秒后停止监视</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">stopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">watch 对比 watchEffect</p><ol><li>都能监听响应式数据的变化，不同的是监听数据变化的方式不同</li><li><code>watch</code>：要明确指出监视的数据</li><li><code>watchEffect</code>：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。</li><li><code>watchEffect</code> 默认开启 deep 和 immediate</li></ol></div>`,47),o=[e];function c(l,u){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","watch.html.vue"]]),d=JSON.parse('{"path":"/front-end/vue3/watch.html","title":"5. 监视","lang":"zh-CN","frontmatter":{"order":5,"description":"5. 监视 Watch 是 Vue 提供的一个用于监视响应式数据变化并执行相应操作的 API，能够对响应式数据的变化做出一些操作的功能。Vue3 中的 Watch 支持多种用法，包括监视响应式对象、ref 对象、数组、函数等。 ref 定义的数据 reactive 定义的数据 函数返回一个值，即 Getter 函数 包含上述内容的数组 基本语法 在正式...","head":[["meta",{"property":"og:url","content":"https://www.codermast.com/front-end/vue3/watch.html"}],["meta",{"property":"og:site_name","content":"CoderMast编程桅杆"}],["meta",{"property":"og:title","content":"5. 监视"}],["meta",{"property":"og:description","content":"5. 监视 Watch 是 Vue 提供的一个用于监视响应式数据变化并执行相应操作的 API，能够对响应式数据的变化做出一些操作的功能。Vue3 中的 Watch 支持多种用法，包括监视响应式对象、ref 对象、数组、函数等。 ref 定义的数据 reactive 定义的数据 函数返回一个值，即 Getter 函数 包含上述内容的数组 基本语法 在正式..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-29T07:34:50.000Z"}],["meta",{"property":"article:author","content":"友人"}],["meta",{"property":"article:modified_time","content":"2024-05-29T07:34:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5. 监视\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-29T07:34:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"友人\\",\\"url\\":\\"https://www.codermast.com\\",\\"email\\":\\"codermast@163.com\\"}]}"]]},"headers":[{"level":2,"title":"基本语法","slug":"基本语法","link":"#基本语法","children":[]},{"level":2,"title":"监视 ref 定义的数据","slug":"监视-ref-定义的数据","link":"#监视-ref-定义的数据","children":[{"level":3,"title":"1. 基本数据类型","slug":"_1-基本数据类型","link":"#_1-基本数据类型","children":[]},{"level":3,"title":"2. 对象数据类型","slug":"_2-对象数据类型","link":"#_2-对象数据类型","children":[]}]},{"level":2,"title":"监视 reactive 定义的数据","slug":"监视-reactive-定义的数据","link":"#监视-reactive-定义的数据","children":[]},{"level":2,"title":"监视函数的返回值","slug":"监视函数的返回值","link":"#监视函数的返回值","children":[]},{"level":2,"title":"监视包含上述数据的数组","slug":"监视包含上述数据的数组","link":"#监视包含上述数据的数组","children":[]},{"level":2,"title":"WatchEffect","slug":"watcheffect","link":"#watcheffect","children":[]}],"git":{"createdTime":1716911783000,"updatedTime":1716968090000,"contributors":[{"name":"codermast","email":"codermast@qq.com","commits":2}]},"readingTime":{"minutes":5.91,"words":1774},"filePathRelative":"front-end/vue3/watch.md","localizedDate":"2024年5月28日","autoDesc":true,"excerpt":"\\n<p>Watch 是 Vue 提供的一个用于监视响应式数据变化并执行相应操作的 API，能够对响应式数据的变化做出一些操作的功能。Vue3 中的 Watch 支持多种用法，包括监视响应式对象、ref 对象、数组、函数等。</p>\\n<ol>\\n<li>ref 定义的数据</li>\\n<li>reactive 定义的数据</li>\\n<li>函数返回一个值，即 Getter 函数</li>\\n<li>包含上述内容的数组</li>\\n</ol>\\n<h2>基本语法</h2>\\n<p>在正式使用 watch 监视之前，为了避免一脸懵逼的情况出现，请先系统性的学习一下 watch 的具体用法，不必担心。</p>\\n<p>watch 监视器是一个函数，这个函数需要几个参数：</p>"}');export{k as comp,d as data};
