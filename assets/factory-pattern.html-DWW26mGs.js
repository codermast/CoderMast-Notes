import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-BmK6V31l.js";const e={},p=t(`<h1 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式"><span>工厂模式</span></a></h1><h2 id="设计思想" tabindex="-1"><a class="header-anchor" href="#设计思想"><span>设计思想</span></a></h2><p>工厂模式是最常用的设计模式之一，属于创建型模式，将创建对象的权利交给了一个工厂类，从而提供了一种不使用构造方法的情况下创建对象的途径，无需指定要创建的具体类，将创建对象的过程进行封装，通过提供的通用接口和一组实现类，隐藏了具体的对象实例化细节，使得实际对象创建的逻辑与使用该对象的逻辑分离，降低了程序的耦合度，实现解耦。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>需要注意的是，这里说的不使用构造方法创建对象是在业务逻辑中通过调用工厂方法来获取对象的，并不是说在工厂方法的具体实现中不使用构造方法。</p></div><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><ol><li>对象的创建过程复杂</li></ol><p>如果一个对象的创建过程较为复杂，或者初始化所依赖的其他项过多，且使用较为频繁，那么就可以使用工厂模式将该对象的实例化过程进行封装，既降低了程序耦合度，也让业务逻辑更为清晰和明了。</p><ol start="2"><li>对象的创建过程不确定</li></ol><p>如果一个对象的创建过程不确定，在后续可能会进行修改，那么此时就可以将对象的创建过程抽离出来，从而达到修改对象的创建不会影响业务逻辑的正常执行的效果。</p><ol start="3"><li>对象的创建需要统一管理</li></ol><p>如果需要统一管理对象的创建过程，或者需要对创建出来的对象做统一处理，那么使用工厂模式就能够很好的完成这个需求。</p><ol start="4"><li>对象的创建依赖不同的条件</li></ol><p>如果需要根据不同的条件来创建不同类型的对象，那么使用工厂模式可以很方便地实现这个需求。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>一个工厂类中可以有多个工厂方法，一般情况下工厂类中的工厂方法都是静态的，即使用 static 关键字修饰，一般都通过类来调用，不实质化工厂对象。</p></div><h2 id="实现案例" tabindex="-1"><a class="header-anchor" href="#实现案例"><span>实现案例</span></a></h2><ul><li>简单案例</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 形状接口</span>
<span class="token keyword">interface</span>  <span class="token class-name">Shape</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 圆</span>
<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;画一个圆...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 矩形</span>
<span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;画一个矩形...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 三角形</span>
<span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;画一个三角形...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShapeFactory</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 简单工厂模式</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Circle</span> <span class="token function">getCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 2. 复杂工厂：根据名称获取</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Shape</span> <span class="token function">getShape</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;circle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;rectangle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试类</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 工厂模式</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryPattern</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ShapeFactory</span><span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">&quot;Circle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ShapeFactory</span><span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">&quot;Rectangle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试结果</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>画一个圆...
画一个矩形...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>一个或一类实例化过程较为复杂的类，可以使用工厂模式来构建对象，同一种类型的类，可抽象为一个工厂方法，通过参数来判断其具体实例化哪个对象。在 Java 中，工厂模式广泛应用于各种框架和类库中，例如 JDBC 中的 DataSource 工厂、 Spring 框架中的 Bean 工厂、MyBatis 框架中的 SqlSessionFactory 等等。</p>`,23),c=[p];function o(l,i){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","factory-pattern.html.vue"]]),k=JSON.parse('{"path":"/dev-idea/design-patterns/create-patterns/factory-pattern.html","title":"工厂模式","lang":"zh-CN","frontmatter":{"order":2,"description":"工厂模式 设计思想 工厂模式是最常用的设计模式之一，属于创建型模式，将创建对象的权利交给了一个工厂类，从而提供了一种不使用构造方法的情况下创建对象的途径，无需指定要创建的具体类，将创建对象的过程进行封装，通过提供的通用接口和一组实现类，隐藏了具体的对象实例化细节，使得实际对象创建的逻辑与使用该对象的逻辑分离，降低了程序的耦合度，实现解耦。 注意 需要注...","head":[["meta",{"property":"og:url","content":"https://www.codermast.com/dev-idea/design-patterns/create-patterns/factory-pattern.html"}],["meta",{"property":"og:site_name","content":"CoderMast编程桅杆"}],["meta",{"property":"og:title","content":"工厂模式"}],["meta",{"property":"og:description","content":"工厂模式 设计思想 工厂模式是最常用的设计模式之一，属于创建型模式，将创建对象的权利交给了一个工厂类，从而提供了一种不使用构造方法的情况下创建对象的途径，无需指定要创建的具体类，将创建对象的过程进行封装，通过提供的通用接口和一组实现类，隐藏了具体的对象实例化细节，使得实际对象创建的逻辑与使用该对象的逻辑分离，降低了程序的耦合度，实现解耦。 注意 需要注..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-29T13:18:57.000Z"}],["meta",{"property":"article:author","content":"友人"}],["meta",{"property":"article:modified_time","content":"2024-04-29T13:18:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工厂模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-29T13:18:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"友人\\",\\"url\\":\\"https://www.codermast.com\\",\\"email\\":\\"codermast@163.com\\"}]}"]]},"headers":[{"level":2,"title":"设计思想","slug":"设计思想","link":"#设计思想","children":[{"level":3,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]}]},{"level":2,"title":"实现案例","slug":"实现案例","link":"#实现案例","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1714012832000,"updatedTime":1714396737000,"contributors":[{"name":"codermast","email":"codermast@qq.com","commits":2}]},"readingTime":{"minutes":2.87,"words":861},"filePathRelative":"dev-idea/design-patterns/create-patterns/factory-pattern.md","localizedDate":"2024年4月25日","autoDesc":true,"excerpt":"\\n<h2>设计思想</h2>\\n<p>工厂模式是最常用的设计模式之一，属于创建型模式，将创建对象的权利交给了一个工厂类，从而提供了一种不使用构造方法的情况下创建对象的途径，无需指定要创建的具体类，将创建对象的过程进行封装，通过提供的通用接口和一组实现类，隐藏了具体的对象实例化细节，使得实际对象创建的逻辑与使用该对象的逻辑分离，降低了程序的耦合度，实现解耦。</p>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>需要注意的是，这里说的不使用构造方法创建对象是在业务逻辑中通过调用工厂方法来获取对象的，并不是说在工厂方法的具体实现中不使用构造方法。</p>\\n</div>"}');export{d as comp,k as data};
