import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-BmK6V31l.js";const e={},p=t(`<h1 id="java-io-file-类" tabindex="-1"><a class="header-anchor" href="#java-io-file-类"><span>Java IO - File 类</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>Java.io.File 类是文件和目录路径名称的抽象表示，主要用于文件和目录的创建、查找和删除等操作。它是文件和目录路径名的抽象表示，文件和目录可以通过 File 封装成对象，对于 File 而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名，该路径下的文件可以存在也可以不存在。</p><div class="hint-container tip"><p class="hint-container-title">开始之前</p><p>在正式学习 File 类的使用之前，非常有必要了解一下相对路径和绝对路径的相关概念，这将贯穿在后面的章节。</p><ul><li>相对路径：一般是从当前目录开始，可使用 <code>../</code> 来表示上层目录，可重复使用，是开发工作中最常使用的。</li><li>绝对路径：从文件系统的根目录开始，直到所需要的文件时截止，是一个完整的路径。在 Windows 中指从盘符开始的路径。</li></ul></div><h2 id="常用api" tabindex="-1"><a class="header-anchor" href="#常用api"><span>常用API</span></a></h2><h3 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法"><span>构造方法</span></a></h3><table><thead><tr><th style="text-align:center;">方法名</th><th style="text-align:center;">介绍</th></tr></thead><tbody><tr><td style="text-align:center;"><code>public File(String name)</code></td><td style="text-align:center;">根据文件路径名创建文件对象</td></tr><tr><td style="text-align:center;"><code>public File(String parent,String child)</code></td><td style="text-align:center;">根据父路径名字符串和子路径名字符串创建文件对象</td></tr><tr><td style="text-align:center;"><code>public File(File parent,String child) </code></td><td style="text-align:center;">根据父路径对应文件对象和子路径名字符串创建文件对象</td></tr></tbody></table><p>只要看过 File 类的源码，就不难看出这三个构造方法实际上只是对父级路径和子级路径进行拼接，然后再创建 File 对象。</p><p>既然底层只是进行了父、子路径字符串的拼接，那为什么我们不亲自进行拼接呢？这其实是一个很简单，但很容易被忽视的问题。</p><p>在 Windows 系统中的文件层级分割符是 <code>\\</code>，而在 Linux 系统中是 <code>/</code>，Java 是一个跨平台语言，如果我们直接将路径名写成绝对，那么在 Windows 上能运行的程序，可能在 Linux 系统内无法正常运行。</p><p>故为了跨平台的兼容性，一般都使用提供的构造方法来进行拼接。</p><p>那么有些时候必须要使用这个分隔符，该怎么做呢？在 Java 中提供了 <code>File.separator</code> 属性来根据当前运行的操作系统，获取文件分隔符。</p><h3 id="判断" tabindex="-1"><a class="header-anchor" href="#判断"><span>判断</span></a></h3><table><thead><tr><th style="text-align:center;">方法名</th><th style="text-align:center;">介绍</th></tr></thead><tbody><tr><td style="text-align:center;">public boolean isDirectory()</td><td style="text-align:center;">判断此路径名表示的 File 对象是否为文件夹</td></tr><tr><td style="text-align:center;">public boolean isFile()</td><td style="text-align:center;">判断此路径名表示的 File 对象是否为文件</td></tr><tr><td style="text-align:center;">public boolean exists()</td><td style="text-align:center;">判断此路径名表示的 File 是否存在</td></tr></tbody></table><h3 id="获取" tabindex="-1"><a class="header-anchor" href="#获取"><span>获取</span></a></h3><table><thead><tr><th style="text-align:center;">方法名</th><th style="text-align:center;">介绍</th></tr></thead><tbody><tr><td style="text-align:center;">public long length()</td><td style="text-align:center;">获取文件的大小（字节数）</td></tr><tr><td style="text-align:center;">public String getAbsolutePath()</td><td style="text-align:center;">获取文件的绝对路径</td></tr><tr><td style="text-align:center;">public String getPath()</td><td style="text-align:center;">获取定义文件时使用的路径</td></tr><tr><td style="text-align:center;">public String getName()</td><td style="text-align:center;">获取文件的名称，带后缀</td></tr><tr><td style="text-align:center;">public long lastModified()</td><td style="text-align:center;">获取文件的最后修改时间（时间毫秒值）</td></tr></tbody></table><h3 id="创建、删除" tabindex="-1"><a class="header-anchor" href="#创建、删除"><span>创建、删除</span></a></h3><table><thead><tr><th style="text-align:center;">方法名</th><th style="text-align:center;">介绍</th></tr></thead><tbody><tr><td style="text-align:center;">public boolean createNewFile()</td><td style="text-align:center;">创建一个新的空文件</td></tr><tr><td style="text-align:center;">public boolean mkdir()</td><td style="text-align:center;">创建单级文件夹</td></tr><tr><td style="text-align:center;">public boolean mkdirs()</td><td style="text-align:center;">创建多级文件夹</td></tr><tr><td style="text-align:center;">public boolean delete()</td><td style="text-align:center;">删除文件、空文件夹</td></tr></tbody></table><h3 id="获取多个信息" tabindex="-1"><a class="header-anchor" href="#获取多个信息"><span>获取多个信息</span></a></h3><table><thead><tr><th style="text-align:center;">方法名</th><th style="text-align:center;">介绍</th></tr></thead><tbody><tr><td style="text-align:center;">public String[] list()</td><td style="text-align:center;">获取当前该路径下所有文件名</td></tr><tr><td style="text-align:center;">public String[] list(FilenameFilter filter)</td><td style="text-align:center;">利用文件名过滤器获取当前该路径下所有文件名</td></tr><tr><td style="text-align:center;">public static File[] listRoots()</td><td style="text-align:center;">列出可用的文件系统根</td></tr><tr><td style="text-align:center;">public File[] listFiles()</td><td style="text-align:center;">获取当前该路径下所有内容</td></tr><tr><td style="text-align:center;">public File[] listFiles(FileFilter filter)</td><td style="text-align:center;">利用<code>文件</code>过滤器获取当前该路径下所有内容</td></tr><tr><td style="text-align:center;">public File[] listFiles(FilenameFilter filter)</td><td style="text-align:center;">利用<code>文件名</code>过滤器获取当前该路径下所有内容</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">FileFilter 和 FilenameFilter</p><ul><li>FileFilter：文件过滤器，是一个接口，用于抽象路径名(File对象)的过滤器 <ul><li>接口里唯一的抽象方法：<code>boolean accept(File pathname)</code> 测试 pathname 是否应该包含在当前 File 目录中 若符合则返回true。</li><li>参数<code>(File pathname)</code>：使用ListFiles方法遍历目录后 得到的每一个文件对象</li></ul></li><li>FilenameFilter：文件名称过滤器，也是一个接口 <ul><li>接口里的唯一抽象方法：<code>boolean accept(File dir, String name)</code> 测试 name 是否应该包含在当前 dir 目录中 若符合则返回true。</li><li>参数<code>(File dir, String name)</code>：dir 是文件所在的目录，name 是匹配的名称</li></ul></li></ul><p>这两个过滤器都是接口，在使用之前需要进行实现，<code>accept()</code>方法返回的是一个布尔值：</p><ul><li>true：将传递过去的File对象保存到File数组中(放行)</li><li>false：不将传递过去的File对象保存到File数组中</li></ul></div><h2 id="api使用" tabindex="-1"><a class="header-anchor" href="#api使用"><span>API使用</span></a></h2><ul><li>获取</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 根据文件名创建文件对象</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;com/codermast/io/test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 获取文件的字节数</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 获取文件的绝对路径</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4. 获取文件的名称</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 5. 获取文件最后修改时间</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 6. 获取文件定义时使用的路径</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>4
/Users/codermast/DevProjects/Demo/com/codermast/io/test.txt
test.txt
1712891669178
com/codermast/io/test.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>判断</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 创建文件对象</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;com/codermast/io/test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 判断是否为文件夹</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;判断是否为文件夹：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 判断是否为文件</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;判断是否为文件：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4. 判断文件是否存在</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;判断文件是否存在：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>判断是否为文件夹：false
判断是否为文件：true
判断文件是否存在：true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建、删除</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 创建一个新的空文件</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;com/codermast/io/codermast.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> newFile <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;创建新的空文件：&quot;</span> <span class="token operator">+</span> newFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 创建单级文件夹</span>
    <span class="token class-name">File</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;com/codermast/io/test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> mkdir <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;创建单级文件夹：&quot;</span> <span class="token operator">+</span> mkdir<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 创建多级文件夹</span>
    <span class="token class-name">File</span> dir2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;com/codermast/io/test/test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> mkdirs <span class="token operator">=</span> dir2<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;创建多级文件夹：&quot;</span> <span class="token operator">+</span> mkdirs<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4. 删除文件</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;删除文件：&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 5. 删除空文件夹</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;删除空文件夹&quot;</span> <span class="token operator">+</span> dir2<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一次执行结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>创建新的空文件：true
创建单级文件夹：true
创建多级文件夹：true
删除文件：true
删除空文件夹true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二次执行结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>创建新的空文件：true
创建单级文件夹：false
创建多级文件夹：true
删除文件：true
删除空文件夹true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>获取多个信息</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 1. 创建文件夹对象</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;com/codermast/io/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 获取当前文件夹下所有文件名</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3. 利用文件名过滤器获取当前文件夹下所有文件名</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list1 <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FilenameFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">File</span> dir<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Lambda 写法</span>
    <span class="token comment">// String[] list1 = file.list((dir, name) -&gt; name.toLowerCase().endsWith(&quot;.java&quot;));</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> list1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4. 列出可用的文件系统根：在 windows 上可能有多个根，Linux 和 MacOS 上只有一个根</span>
    <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span><span class="token function">listRoots</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file1 <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 5. 获取当前该路径下所有内容</span>
    <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files1 <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file2 <span class="token operator">:</span> files1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 6. 利用文件过滤器获取当前该路径下所有内容</span>
    <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files2 <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">File</span> pathname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> pathname<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Lambda 写法</span>
    <span class="token comment">// File[] files2 = file.listFiles(pathname -&gt; pathname.getName().toLowerCase().endsWith(&quot;.java&quot;));</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file1 <span class="token operator">:</span> files2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 7. 利用文件名过滤器获取当前该路径下所有内容</span>
    <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files3 <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">File</span> pathname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> pathname<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Lambda 写法</span>
    <span class="token comment">// File[] files3 = file.listFiles(pathname -&gt; pathname.getName().toLowerCase().endsWith(&quot;.java&quot;));</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file1 <span class="token operator">:</span> files3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>===================
test
OsPathSeparatorUtils.java
FileJudgeDemo.java
FileCreateDeleteDemo.java
FileGetDemo.java
FileMultipleDemo.java
test.txt
===================
OsPathSeparatorUtils.java
FileJudgeDemo.java
FileCreateDeleteDemo.java
FileGetDemo.java
FileMultipleDemo.java
===================
/
===================
com/codermast/io/test
com/codermast/io/OsPathSeparatorUtils.java
com/codermast/io/FileJudgeDemo.java
com/codermast/io/FileCreateDeleteDemo.java
com/codermast/io/FileGetDemo.java
com/codermast/io/FileMultipleDemo.java
com/codermast/io/test.txt
===================
com/codermast/io/OsPathSeparatorUtils.java
com/codermast/io/FileJudgeDemo.java
com/codermast/io/FileCreateDeleteDemo.java
com/codermast/io/FileGetDemo.java
com/codermast/io/FileMultipleDemo.java
===================
test.txt
===================
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40),l=[p];function i(c,o){return s(),a("div",null,l)}const r=n(e,[["render",i],["__file","file.html.vue"]]),k=JSON.parse('{"path":"/java/io/file.html","title":"Java IO - File 类","lang":"zh-CN","frontmatter":{"order":1,"description":"Java IO - File 类 概述 Java.io.File 类是文件和目录路径名称的抽象表示，主要用于文件和目录的创建、查找和删除等操作。它是文件和目录路径名的抽象表示，文件和目录可以通过 File 封装成对象，对于 File 而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名，该路径下的文件可以存在也可以不存在。 开始之前 在正式学习 F...","head":[["meta",{"property":"og:url","content":"https://www.codermast.com/java/io/file.html"}],["meta",{"property":"og:site_name","content":"CoderMast编程桅杆"}],["meta",{"property":"og:title","content":"Java IO - File 类"}],["meta",{"property":"og:description","content":"Java IO - File 类 概述 Java.io.File 类是文件和目录路径名称的抽象表示，主要用于文件和目录的创建、查找和删除等操作。它是文件和目录路径名的抽象表示，文件和目录可以通过 File 封装成对象，对于 File 而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名，该路径下的文件可以存在也可以不存在。 开始之前 在正式学习 F..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-20T12:17:49.000Z"}],["meta",{"property":"article:author","content":"友人"}],["meta",{"property":"article:modified_time","content":"2024-04-20T12:17:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java IO - File 类\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-20T12:17:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"友人\\",\\"url\\":\\"https://www.codermast.com\\",\\"email\\":\\"codermast@163.com\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"常用API","slug":"常用api","link":"#常用api","children":[{"level":3,"title":"构造方法","slug":"构造方法","link":"#构造方法","children":[]},{"level":3,"title":"判断","slug":"判断","link":"#判断","children":[]},{"level":3,"title":"获取","slug":"获取","link":"#获取","children":[]},{"level":3,"title":"创建、删除","slug":"创建、删除","link":"#创建、删除","children":[]},{"level":3,"title":"获取多个信息","slug":"获取多个信息","link":"#获取多个信息","children":[]}]},{"level":2,"title":"API使用","slug":"api使用","link":"#api使用","children":[]}],"git":{"createdTime":1712895956000,"updatedTime":1713615469000,"contributors":[{"name":"codermast","email":"codermast@qq.com","commits":2}]},"readingTime":{"minutes":6.34,"words":1903},"filePathRelative":"java/io/file.md","localizedDate":"2024年4月12日","autoDesc":true,"excerpt":"\\n<h2>概述</h2>\\n<p>Java.io.File 类是文件和目录路径名称的抽象表示，主要用于文件和目录的创建、查找和删除等操作。它是文件和目录路径名的抽象表示，文件和目录可以通过 File 封装成对象，对于 File 而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名，该路径下的文件可以存在也可以不存在。</p>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">开始之前</p>\\n<p>在正式学习 File 类的使用之前，非常有必要了解一下相对路径和绝对路径的相关概念，这将贯穿在后面的章节。</p>\\n<ul>\\n<li>相对路径：一般是从当前目录开始，可使用 <code>../</code> 来表示上层目录，可重复使用，是开发工作中最常使用的。</li>\\n<li>绝对路径：从文件系统的根目录开始，直到所需要的文件时截止，是一个完整的路径。在 Windows 中指从盘符开始的路径。</li>\\n</ul>\\n</div>"}');export{r as comp,k as data};
