import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as i,a as o}from"./app-BGiMPO_O.js";const n={},a=o('<h1 id="redis入门-事务" tabindex="-1"><a class="header-anchor" href="#redis入门-事务"><span>Redis入门 - 事务</span></a></h1><p>Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证：</p><ul><li>批量操作在发送 EXEC 命令前被放入队列缓存。</li><li>收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。</li><li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li></ul><p>一个事务从开始到执行会经历以下三个阶段：</p><ul><li>开始事务。</li><li>命令入队。</li><li>执行事务。</li></ul><p>单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis 事务的执行并不是原子性的。</p><p>事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做。</p><p><strong>Redis事务命令</strong></p><ul><li>开始事务：<code>multi</code></li><li>执行事务：<code>exec</code></li><li>取消事务：<code>discard</code></li><li>监视一个(或多个) key：<code>watch key [key ...]</code></li></ul><blockquote><p>监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p></blockquote><ul><li>取消监视：<code>unwatch</code></li></ul><blockquote><p>取消 WATCH 命令对所有 key 的监视。</p></blockquote><div class="hint-container caution"><p class="hint-container-title">注意</p><p>Redis的事务和MySQL的事务是不同的，MySQL的事务要么全部执行，要么全部不执行。而Redis仅仅是一组命令的顺序执行集合，事务不会回滚，也不会随着报错而停止。</p></div>',13),r=[a];function c(d,l){return i(),t("div",null,r)}const m=e(n,[["render",c],["__file","redis-introduction-transaction.html.vue"]]),u=JSON.parse('{"path":"/database/redis/introduce/redis-introduction-transaction.html","title":"Redis入门 - 事务","lang":"zh-CN","frontmatter":{"order":6,"description":"Redis入门 - 事务 Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证： 批量操作在发送 EXEC 命令前被放入队列缓存。 收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。 在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。 一个事务从开始到执行会经历以下三个阶段： 开始事务。...","head":[["meta",{"property":"og:url","content":"https://www.codermast.com/database/redis/introduce/redis-introduction-transaction.html"}],["meta",{"property":"og:site_name","content":"友人的编程指南"}],["meta",{"property":"og:title","content":"Redis入门 - 事务"}],["meta",{"property":"og:description","content":"Redis入门 - 事务 Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证： 批量操作在发送 EXEC 命令前被放入队列缓存。 收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。 在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。 一个事务从开始到执行会经历以下三个阶段： 开始事务。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-31T07:38:39.000Z"}],["meta",{"property":"article:author","content":"友人"}],["meta",{"property":"article:modified_time","content":"2024-05-31T07:38:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis入门 - 事务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-31T07:38:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"友人\\",\\"url\\":\\"https://www.codermast.com\\",\\"email\\":\\"codermast@163.com\\"}]}"]]},"headers":[],"git":{"createdTime":1684256973000,"updatedTime":1717141119000,"contributors":[{"name":"codermast","email":"codermast@qq.com","commits":1}]},"readingTime":{"minutes":1.38,"words":414},"filePathRelative":"database/redis/introduce/redis-introduction-transaction.md","localizedDate":"2023年5月16日","autoDesc":true,"excerpt":"\\n<p>Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证：</p>\\n<ul>\\n<li>批量操作在发送 EXEC 命令前被放入队列缓存。</li>\\n<li>收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。</li>\\n<li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li>\\n</ul>\\n<p>一个事务从开始到执行会经历以下三个阶段：</p>\\n<ul>\\n<li>开始事务。</li>\\n<li>命令入队。</li>\\n<li>执行事务。</li>\\n</ul>\\n<p>单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis 事务的执行并不是原子性的。</p>"}');export{m as comp,u as data};
