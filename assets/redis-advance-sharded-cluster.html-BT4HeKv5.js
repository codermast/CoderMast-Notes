import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as e}from"./app-BLUmwQj7.js";const l="/assets/2023-06-27-22-13-33-CjRsvNo1.png",n="/assets/2023-06-27-22-23-50-6_4T7lvS.png",t="/assets/2023-06-27-22-23-28-DSUYq4Na.png",h="/assets/2023-06-27-22-23-12-LuotGpDE.png",k="/assets/2023-06-27-22-22-54-B4iTKaSO.png",d="/assets/2023-06-27-22-22-08-D6INHwC0.png",p="/assets/2023-06-27-22-21-27-YFsIEwML.png",r="/assets/2023-06-29-17-47-24-CnSE4gx5.png",c={},g=e('<h1 id="redis进阶-redis分片集群" tabindex="-1"><a class="header-anchor" href="#redis进阶-redis分片集群"><span>Redis进阶 - Redis分片集群</span></a></h1><h2 id="搭建分片集群" tabindex="-1"><a class="header-anchor" href="#搭建分片集群"><span>搭建分片集群</span></a></h2><p>主从和哨兵可以解决高可用、高并发读的问题。但是依然有两个问题没有解决：</p><ul><li>海量数据存储问题</li><li>高并发写的问题</li></ul><p>使用分片集群可以解决上述问题，分片集群特征：</p><ul><li>集群中有多个 master，每个 master 保存不同数据</li><li>每个 master 都可以有多个 slave 节点</li><li>master 之间通过 ping 监测彼此健康状态</li><li>客户端请求可以访问集群任意节点，最终都会被转发到正确节点</li></ul><h3 id="集群结构" tabindex="-1"><a class="header-anchor" href="#集群结构"><span>集群结构</span></a></h3><p>分片集群需要的节点数量较多，这里我们搭建一个最小的分片集群，包含3个master节点，每个master包含一个slave节点，结构如下：</p><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里我们会在同一台虚拟机中开启6个redis实例，模拟分片集群，信息如下：</p><table><thead><tr><th style="text-align:center;">IP</th><th style="text-align:center;">PORT</th><th style="text-align:center;">角色</th></tr></thead><tbody><tr><td style="text-align:center;">192.168.150.101</td><td style="text-align:center;">7001</td><td style="text-align:center;">master</td></tr><tr><td style="text-align:center;">192.168.150.101</td><td style="text-align:center;">7002</td><td style="text-align:center;">master</td></tr><tr><td style="text-align:center;">192.168.150.101</td><td style="text-align:center;">7003</td><td style="text-align:center;">master</td></tr><tr><td style="text-align:center;">192.168.150.101</td><td style="text-align:center;">8001</td><td style="text-align:center;">slave</td></tr><tr><td style="text-align:center;">192.168.150.101</td><td style="text-align:center;">8002</td><td style="text-align:center;">slave</td></tr><tr><td style="text-align:center;">192.168.150.101</td><td style="text-align:center;">8003</td><td style="text-align:center;">slave</td></tr></tbody></table><h3 id="准备实例和配置" tabindex="-1"><a class="header-anchor" href="#准备实例和配置"><span>准备实例和配置</span></a></h3><p>删除之前的7001、7002、7003这几个目录，重新创建出7001、7002、7003、8001、8002、8003目录：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 进入/tmp目录</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /tmp</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 删除旧的，避免配置干扰</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -rf</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7001</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7002</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7003</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 创建目录</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7001</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7002</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7003</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8001</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8002</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8003</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在/tmp下准备一个新的redis.conf文件，内容如下：</p><div class="language-ini line-numbers-mode" data-highlighter="shiki" data-ext="ini" data-title="ini" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">port 6379</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 开启集群功能</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">cluster-enabled yes</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 集群的配置文件名称，不需要我们创建，由redis自己维护</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">cluster-config-file /tmp/6379/nodes.conf</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 节点心跳失败的超时时间</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">cluster-node-timeout 5000</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 持久化文件存放目录</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">dir /tmp/6379</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 绑定地址</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">bind 0.0.0.0</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 让redis后台运行</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">daemonize yes</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 注册的实例ip</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">replica-announce-ip 192.168.150.101</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 保护模式</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">protected-mode no</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 数据库数量</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">databases 1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 日志</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">logfile /tmp/6379/run.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将这个文件拷贝到每个目录下：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 进入/tmp目录</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /tmp</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 执行拷贝</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7001</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7002</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7003</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8001</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8002</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8003</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xargs</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -n</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改每个目录下的redis.conf，将其中的6379修改为与所在目录一致：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 进入/tmp目录</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /tmp</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 修改配置文件</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">printf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;%s\\n&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7001</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7002</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7003</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8001</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8002</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8003</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xargs</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -I</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{} -t sed -i &#39;s/6379/{}/g&#39; {}/redis.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动" tabindex="-1"><a class="header-anchor" href="#启动"><span>启动</span></a></h3><p>因为已经配置了后台启动模式，所以可以直接启动服务：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 进入/tmp目录</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /tmp</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 一键启动所有服务</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">printf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;%s\\n&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7001</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7002</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7003</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8001</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8002</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8003</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xargs</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -I</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{} -t redis-server {}/redis.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过ps查看状态：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ps</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -ef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>发现服务都已经正常启动：</p><figure><img src="`+n+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果要关闭所有进程，可以执行命令：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ps</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -ef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print $2}&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xargs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kill</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者（推荐这种方式）：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">printf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;%s\\n&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7001</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7002</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7003</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8001</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8002</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8003</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xargs</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -I</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{} -t redis-cli -p {} shutdown</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="创建集群" tabindex="-1"><a class="header-anchor" href="#创建集群"><span>创建集群</span></a></h3><p>虽然服务启动了，但是目前每个服务之间都是独立的，没有任何关联。</p><p>我们需要执行命令来创建集群，在Redis5.0之前创建集群比较麻烦，5.0之后集群管理命令都集成到了redis-cli中。</p><ol><li>Redis5.0之前</li></ol><p>Redis5.0之前集群命令都是用redis安装包下的src/redis-trib.rb来实现的。因为redis-trib.rb是有ruby语言编写的所以需要安装ruby环境。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yum</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -y</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> zlib</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ruby</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rubygems</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后通过命令来管理集群：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 进入redis的src目录</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /tmp/redis-6.2.4/src</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 创建集群</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./redis-trib.rb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --replicas</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 192.168.150.101:7001</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 192.168.150.101:7002</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 192.168.150.101:7003</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 192.168.150.101:8001</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 192.168.150.101:8002</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 192.168.150.101:8003</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Redis5.0以后</li></ol><p>我们使用的是Redis6.2.4版本，集群管理以及集成到了redis-cli中，格式如下：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cluster-replicas</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 192.168.150.101:7001</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 192.168.150.101:7002</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 192.168.150.101:7003</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 192.168.150.101:8001</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 192.168.150.101:8002</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 192.168.150.101:8003</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>命令说明：</p><ul><li><code>redis-cli --cluster</code>或者<code>./redis-trib.rb</code>：代表集群操作命令</li><li><code>create</code>：代表是创建集群</li><li><code>--replicas 1</code>或者<code>--cluster-replicas 1</code> ：指定集群中每个master的副本个数为1，此时<code>节点总数 ÷ (replicas + 1)</code> 得到的就是master的数量。因此节点列表中的前n个就是master，其它节点都是slave节点，随机分配到不同master</li></ul><p>运行后的样子：</p><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里输入yes，则集群开始创建：</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过命令可以查看集群状态：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7001</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nodes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="'+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h3><p>尝试连接7001节点，存储一个数据：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 连接</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7001</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 存储数据</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> num</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 123</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 读取数据</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> num</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 再次存储</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果悲剧了：</p><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>集群操作时，需要给<code>redis-cli</code>加上<code>-c</code>参数才可以：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7001</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这次可以了：</p><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="散列插槽" tabindex="-1"><a class="header-anchor" href="#散列插槽"><span>散列插槽</span></a></h2><p>Redis 会把每一个 master 节点映射到 0~16383 共 16384 个插槽（hash slot）上，查看集群信息时就能看到：</p><p>数据 key 不是与节点绑定，而是与插槽绑定。Redis 会根据 key 的有小部分计算插槽值，分两种情况：</p><ul><li>key 中包含 <code>{}</code> ，且<code>{}</code>中至少包含 1 个字符，<code>{}</code>中的部分是有效部分</li><li>key 中不包含 <code>{}</code>，整个 key 都是有效部分</li></ul><p>::: 例如<br> key 是 num，那么就根据 num 计算，如果是 {itcast}num，则根据 itcast 计算。计算方式是利用 CRC16 算法得到一个 hash 值，然后对 16384 取余，得到的结果就是 slot 值。<br> :::</p><p><strong>Redis如何判断某个 key 应该在哪个实例？</strong></p><ul><li>将 16384 个插槽分配到不同的实例</li><li>根据 key 的有效部分计算哈希值，对 16384 取余</li><li>余数作为插槽，寻找插槽所在实例即可</li></ul><p><strong>如何将同一类数据固定的保存在同一个 Redis 实例？</strong></p><ul><li>这一类数据使用相同的有效部分，例如 key 都以 { typeid } 为前缀</li></ul><h2 id="集群伸缩" tabindex="-1"><a class="header-anchor" href="#集群伸缩"><span>集群伸缩</span></a></h2><p>集群伸缩就是集群节点能够动态的增加和减少，并且在集群伸缩的同时，也伴随着槽位及槽位中数据在节点之间的移动。</p><p>redis-cli --cluster 提供了很多操作集群的命令，可以通过<code>redis-cli --cluster help</code>指令查看。</p><p><strong>向集群中添加一个新 master 节点，并存储 num = 1000 ：</strong></p><ol><li>启动一个新的 Redis 实例，端口为 7004</li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 创建实例目录</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7004</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 创建 redis 服务</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sed</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> s/6379/7004/g</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 7004/redis.conf</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 运行 redis 服务</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 7004/redis.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>添加 7004 到之前的集群，并作为一个 master 节点</li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add-node</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 192.168.150.101:7004</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 192.168.150.101:7001</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>给 7004 节点分配插槽，使得 num 这个 key 可以存储到 7004 实例</li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 重新分片</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> reshard</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 192.168.150.101:7001</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 移动 3000 个插槽</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">How</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> many</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> slots</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> do</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> you</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> want</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> move</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (from </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 16384</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)? 3000</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 接收插槽的 ID</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">What</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> is</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> receiving</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> node</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ID?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 「这里输入</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7001</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 即可」</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 使用 done 结束</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 是否确认移动</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Do</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> you</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> want</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> proceed</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> with</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> proposed</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rehard</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> plan</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (yes/no)? yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="故障转移" tabindex="-1"><a class="header-anchor" href="#故障转移"><span>故障转移</span></a></h2><p>当集群中有一个 master 宕机会发生什么？</p><ol><li><p>首先是该实例与其他实例失去连接</p></li><li><p>然后是疑似宕机</p></li><li><p>最后是确定下线，自动提升一个 slave 为新的 master</p></li></ol><blockquote><p>这里选取 slave 的方式是根据 offset 偏移量和 id 进行筛选</p></blockquote><p><strong>数据迁移</strong></p><p>利用 cluster failover 命令可以手动让集群中的某个 master 宕机，切换到执行 cluster failover 命令的这个 slave 节点，实现无感知的数据迁移。具体的流程如下：</p><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>手动的 Failover 支持三种不同模式：</p><ul><li>缺省：默认的流程</li><li>force：省略的对 offset 的一致性校验</li><li>takeover：直接执行第 5 步，忽略数据一致性、忽略 master 状态和其他 master 的意见</li></ul><h2 id="redistemplate访问分片集群" tabindex="-1"><a class="header-anchor" href="#redistemplate访问分片集群"><span>RedisTemplate访问分片集群</span></a></h2><p>RedisTemplate 底层同样基于 lettuce 实现了分片集群的支持，而使用的步骤与哨兵模式基本一致：</p><ol><li><p>引入 redis 的 starter 依赖</p></li><li><p>配置分片集群地址</p></li><li><p>配置读写分离</p></li></ol><p>与哨兵模式相比，其中只有分片集群的配置方式略有差异，如下:</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    cluster</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      nodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:    </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 指定分片集群的每一个节点信息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.150.101:7001</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.150.101:7002</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.150.101:7003</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.150.101:8001</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.150.101:8002</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.150.101:8003</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,93),o=[g];function y(A,m){return a(),s("div",null,o)}const F=i(c,[["render",y],["__file","redis-advance-sharded-cluster.html.vue"]]),b=JSON.parse('{"path":"/database/redis/advance/redis-advance-sharded-cluster.html","title":"Redis进阶 - Redis分片集群","lang":"zh-CN","frontmatter":{"order":16,"description":"Redis进阶 - Redis分片集群 搭建分片集群 主从和哨兵可以解决高可用、高并发读的问题。但是依然有两个问题没有解决： 海量数据存储问题 高并发写的问题 使用分片集群可以解决上述问题，分片集群特征： 集群中有多个 master，每个 master 保存不同数据 每个 master 都可以有多个 slave 节点 master 之间通过 ping ...","head":[["meta",{"property":"og:url","content":"https://www.codermast.com/database/redis/advance/redis-advance-sharded-cluster.html"}],["meta",{"property":"og:site_name","content":"友人的编程指南"}],["meta",{"property":"og:title","content":"Redis进阶 - Redis分片集群"}],["meta",{"property":"og:description","content":"Redis进阶 - Redis分片集群 搭建分片集群 主从和哨兵可以解决高可用、高并发读的问题。但是依然有两个问题没有解决： 海量数据存储问题 高并发写的问题 使用分片集群可以解决上述问题，分片集群特征： 集群中有多个 master，每个 master 保存不同数据 每个 master 都可以有多个 slave 节点 master 之间通过 ping ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-31T07:38:39.000Z"}],["meta",{"property":"article:author","content":"友人"}],["meta",{"property":"article:modified_time","content":"2024-05-31T07:38:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis进阶 - Redis分片集群\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-31T07:38:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"友人\\",\\"url\\":\\"https://www.codermast.com\\",\\"email\\":\\"codermast@163.com\\"}]}"]]},"headers":[{"level":2,"title":"搭建分片集群","slug":"搭建分片集群","link":"#搭建分片集群","children":[{"level":3,"title":"集群结构","slug":"集群结构","link":"#集群结构","children":[]},{"level":3,"title":"准备实例和配置","slug":"准备实例和配置","link":"#准备实例和配置","children":[]},{"level":3,"title":"启动","slug":"启动","link":"#启动","children":[]},{"level":3,"title":"创建集群","slug":"创建集群","link":"#创建集群","children":[]},{"level":3,"title":"测试","slug":"测试","link":"#测试","children":[]}]},{"level":2,"title":"散列插槽","slug":"散列插槽","link":"#散列插槽","children":[]},{"level":2,"title":"集群伸缩","slug":"集群伸缩","link":"#集群伸缩","children":[]},{"level":2,"title":"故障转移","slug":"故障转移","link":"#故障转移","children":[]},{"level":2,"title":"RedisTemplate访问分片集群","slug":"redistemplate访问分片集群","link":"#redistemplate访问分片集群","children":[]}],"git":{"createdTime":1687512750000,"updatedTime":1717141119000,"contributors":[{"name":"codermast","email":"codermast@qq.com","commits":1}]},"readingTime":{"minutes":6.77,"words":2030},"filePathRelative":"database/redis/advance/redis-advance-sharded-cluster.md","localizedDate":"2023年6月23日","autoDesc":true,"excerpt":"\\n<h2>搭建分片集群</h2>\\n<p>主从和哨兵可以解决高可用、高并发读的问题。但是依然有两个问题没有解决：</p>\\n<ul>\\n<li>海量数据存储问题</li>\\n<li>高并发写的问题</li>\\n</ul>\\n<p>使用分片集群可以解决上述问题，分片集群特征：</p>\\n<ul>\\n<li>集群中有多个 master，每个 master 保存不同数据</li>\\n<li>每个 master 都可以有多个 slave 节点</li>\\n<li>master 之间通过 ping 监测彼此健康状态</li>\\n<li>客户端请求可以访问集群任意节点，最终都会被转发到正确节点</li>\\n</ul>\\n<h3>集群结构</h3>"}');export{F as comp,b as data};
